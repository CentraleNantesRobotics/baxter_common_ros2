// Generated by gencpp from file control_msgs/JointJog.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_JOINTJOG_H
#define CONTROL_MSGS_MESSAGE_JOINTJOG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace control_msgs
{
template <class ContainerAllocator>
struct JointJog_
{
  typedef JointJog_<ContainerAllocator> Type;

  JointJog_()
    : header()
    , joint_names()
    , displacements()
    , velocities()
    , duration(0.0)  {
    }
  JointJog_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint_names(_alloc)
    , displacements(_alloc)
    , velocities(_alloc)
    , duration(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _displacements_type;
  _displacements_type displacements;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _velocities_type;
  _velocities_type velocities;

   typedef double _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::control_msgs::JointJog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::JointJog_<ContainerAllocator> const> ConstPtr;

}; // struct JointJog_

typedef ::control_msgs::JointJog_<std::allocator<void> > JointJog;

typedef boost::shared_ptr< ::control_msgs::JointJog > JointJogPtr;
typedef boost::shared_ptr< ::control_msgs::JointJog const> JointJogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::JointJog_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::JointJog_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_msgs::JointJog_<ContainerAllocator1> & lhs, const ::control_msgs::JointJog_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.joint_names == rhs.joint_names &&
    lhs.displacements == rhs.displacements &&
    lhs.velocities == rhs.velocities &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_msgs::JointJog_<ContainerAllocator1> & lhs, const ::control_msgs::JointJog_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_msgs::JointJog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::JointJog_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::JointJog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::JointJog_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::JointJog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::JointJog_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::JointJog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1685da700c8c2e1254afc92a5fb89c96";
  }

  static const char* value(const ::control_msgs::JointJog_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1685da700c8c2e12ULL;
  static const uint64_t static_value2 = 0x54afc92a5fb89c96ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::JointJog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/JointJog";
  }

  static const char* value(const ::control_msgs::JointJog_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::JointJog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Used in time-stamping the message.\n"
"Header header\n"
"\n"
"# Name list of the joints. You don't need to specify all joints of the\n"
"# robot. Joint names are case-sensitive.\n"
"string[] joint_names\n"
"\n"
"# A position command to the joints listed in joint_names.\n"
"# The order must be identical.\n"
"# Units are meters or radians.\n"
"# If displacements and velocities are filled, a profiled motion is requested.\n"
"float64[] displacements # or position_deltas\n"
"\n"
"# A velocity command to the joints listed in joint_names.\n"
"# The order must be identical.\n"
"# Units are m/s or rad/s.\n"
"# If displacements and velocities are filled, a profiled motion is requested.\n"
"float64[] velocities\n"
"\n"
"float64 duration\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::control_msgs::JointJog_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::JointJog_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint_names);
      stream.next(m.displacements);
      stream.next(m.velocities);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointJog_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::JointJog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::JointJog_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "displacements[]" << std::endl;
    for (size_t i = 0; i < v.displacements.size(); ++i)
    {
      s << indent << "  displacements[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.displacements[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocities[i]);
    }
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_JOINTJOG_H
