// Generated by gencpp from file baxter_core_msgs/JointCommand.msg
// DO NOT EDIT!


#ifndef BAXTER_CORE_MSGS_MESSAGE_JOINTCOMMAND_H
#define BAXTER_CORE_MSGS_MESSAGE_JOINTCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace baxter_core_msgs
{
template <class ContainerAllocator>
struct JointCommand_
{
  typedef JointCommand_<ContainerAllocator> Type;

  JointCommand_()
    : mode(0)
    , command()
    , names()  {
    }
  JointCommand_(const ContainerAllocator& _alloc)
    : mode(0)
    , command(_alloc)
    , names(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _mode_type;
  _mode_type mode;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _command_type;
  _command_type command;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _names_type;
  _names_type names;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(POSITION_MODE)
  #undef POSITION_MODE
#endif
#if defined(_WIN32) && defined(VELOCITY_MODE)
  #undef VELOCITY_MODE
#endif
#if defined(_WIN32) && defined(TORQUE_MODE)
  #undef TORQUE_MODE
#endif
#if defined(_WIN32) && defined(RAW_POSITION_MODE)
  #undef RAW_POSITION_MODE
#endif

  enum {
    POSITION_MODE = 1,
    VELOCITY_MODE = 2,
    TORQUE_MODE = 3,
    RAW_POSITION_MODE = 4,
  };


  typedef boost::shared_ptr< ::baxter_core_msgs::JointCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::baxter_core_msgs::JointCommand_<ContainerAllocator> const> ConstPtr;

}; // struct JointCommand_

typedef ::baxter_core_msgs::JointCommand_<std::allocator<void> > JointCommand;

typedef boost::shared_ptr< ::baxter_core_msgs::JointCommand > JointCommandPtr;
typedef boost::shared_ptr< ::baxter_core_msgs::JointCommand const> JointCommandConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::baxter_core_msgs::JointCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::baxter_core_msgs::JointCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::baxter_core_msgs::JointCommand_<ContainerAllocator1> & lhs, const ::baxter_core_msgs::JointCommand_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.command == rhs.command &&
    lhs.names == rhs.names;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::baxter_core_msgs::JointCommand_<ContainerAllocator1> & lhs, const ::baxter_core_msgs::JointCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace baxter_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::baxter_core_msgs::JointCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baxter_core_msgs::JointCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baxter_core_msgs::JointCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baxter_core_msgs::JointCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_core_msgs::JointCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_core_msgs::JointCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::baxter_core_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "19bfec8434dd568ab3c633d187c36f2e";
  }

  static const char* value(const ::baxter_core_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x19bfec8434dd568aULL;
  static const uint64_t static_value2 = 0xb3c633d187c36f2eULL;
};

template<class ContainerAllocator>
struct DataType< ::baxter_core_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baxter_core_msgs/JointCommand";
  }

  static const char* value(const ::baxter_core_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::baxter_core_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 mode\n"
"float64[] command\n"
"string[]  names\n"
"\n"
"int32 POSITION_MODE=1\n"
"int32 VELOCITY_MODE=2\n"
"int32 TORQUE_MODE=3\n"
"int32 RAW_POSITION_MODE=4\n"
;
  }

  static const char* value(const ::baxter_core_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::baxter_core_msgs::JointCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.command);
      stream.next(m.names);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::baxter_core_msgs::JointCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::baxter_core_msgs::JointCommand_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "command[]" << std::endl;
    for (size_t i = 0; i < v.command.size(); ++i)
    {
      s << indent << "  command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.command[i]);
    }
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.names[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAXTER_CORE_MSGS_MESSAGE_JOINTCOMMAND_H
