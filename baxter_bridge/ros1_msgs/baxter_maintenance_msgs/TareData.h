// Generated by gencpp from file baxter_maintenance_msgs/TareData.msg
// DO NOT EDIT!


#ifndef BAXTER_MAINTENANCE_MSGS_MESSAGE_TAREDATA_H
#define BAXTER_MAINTENANCE_MSGS_MESSAGE_TAREDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace baxter_maintenance_msgs
{
template <class ContainerAllocator>
struct TareData_
{
  typedef TareData_<ContainerAllocator> Type;

  TareData_()
    : tuneGravitySpring(false)  {
    }
  TareData_(const ContainerAllocator& _alloc)
    : tuneGravitySpring(false)  {
  (void)_alloc;
    }



   typedef uint8_t _tuneGravitySpring_type;
  _tuneGravitySpring_type tuneGravitySpring;





  typedef boost::shared_ptr< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> const> ConstPtr;

}; // struct TareData_

typedef ::baxter_maintenance_msgs::TareData_<std::allocator<void> > TareData;

typedef boost::shared_ptr< ::baxter_maintenance_msgs::TareData > TareDataPtr;
typedef boost::shared_ptr< ::baxter_maintenance_msgs::TareData const> TareDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::baxter_maintenance_msgs::TareData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::baxter_maintenance_msgs::TareData_<ContainerAllocator1> & lhs, const ::baxter_maintenance_msgs::TareData_<ContainerAllocator2> & rhs)
{
  return lhs.tuneGravitySpring == rhs.tuneGravitySpring;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::baxter_maintenance_msgs::TareData_<ContainerAllocator1> & lhs, const ::baxter_maintenance_msgs::TareData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace baxter_maintenance_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "241e9c2ceee7da9db50693da0b3f2741";
  }

  static const char* value(const ::baxter_maintenance_msgs::TareData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x241e9c2ceee7da9dULL;
  static const uint64_t static_value2 = 0xb50693da0b3f2741ULL;
};

template<class ContainerAllocator>
struct DataType< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baxter_maintenance_msgs/TareData";
  }

  static const char* value(const ::baxter_maintenance_msgs::TareData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool tuneGravitySpring\n"
;
  }

  static const char* value(const ::baxter_maintenance_msgs::TareData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tuneGravitySpring);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TareData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::baxter_maintenance_msgs::TareData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::baxter_maintenance_msgs::TareData_<ContainerAllocator>& v)
  {
    s << indent << "tuneGravitySpring: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tuneGravitySpring);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAXTER_MAINTENANCE_MSGS_MESSAGE_TAREDATA_H
